library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.all;
entity traffic is
port(clk3: in STD_LOGIC;
CLR: in STD_LOGIC;
lights: out STD_LOGIC_VECTOR(11 downto 0));
end traffic;
architecture traffic of traffic is
type state_type is (s0,s1,s2,s3,s4,s5,s6,s7,s8);
signal state: state_type;
signal count: STD_LOGIC_VECTOR(3 downto 0);
constant SEC5: STD_LOGIC_VECTOR(3 downto 0) := "1111";
constant SEC1: STD_LOGIC_VECTOR(3 downto 0) := "0011";
begin
if clr = '1' then
state<= s0;
count <= X"0";
elsif clk3'event and clk3 = '1' then
case state is
when s0 =>
if count < SEC1 then
state <= s0;
count <= count + 1;
else
state <= s1;
count <= count +1;
else
state <= s2;
count <= X"0";
end if;
when s3 =>
if count < SEC5 then
state <= s3;
count <= count +1;
else
state <= s3;
count <= X"0";
end if;
when s4 => 
if count < SEC1 then
state <= s4;
count <= count +1;
else
state <= s5;
count <= X"0";
end if; 
when s5 =>
if count < SEC5 then
state <= s5;
count <= count +1;
else
state <= s6;
count <= X"0";
end if;
when s6 =>
if count < SEC1 then
state <= s6;
count <= X"0";
else
state <= s7;
count <= X"0";
end if;
when s7 =>
if count < SEC5 then
state <= s7;
count <= count +1;
else
state <= s8;
count <= X"0";
end if;
when s8 =>
if count < SEC1 then
state <= s8;
count <= count +1;
else
state <= s1;
count <= X"0";
end if;
when others =>
state <= s0;
end case;
end if;
end process;
C2: process(state)
begin
case state is
when s0 => lights <= "010010010010";
when s1 => lights <= "001100100100";
when s2 => lights <= "010010100100";
when s3 => lights <= "100001100100";
when s4 => lights <= "100010010100";
when s5 => lights <= "100100001100";
when s6 => lights <= "100100010010";
when s7 => lights <= "100100100001":
when s8 => lights <= "010100100010";
when others => lights <= "010010010010";
end case;
end process;
end traffic;
